//Агрегация и композиция - это одни из способов взаимодействия с классами
//композиция представляет собой какой-то класс, который работает благодаря другим классам (составляющим деталям),
//и использует внутри себя объекты других классов

/*
 * Возьмём, например класс автомобиля: 
 * класс внутри себя использует объект класса двигатель и массив объектов класса колесо (в данном случае 4)
 * 
 * Таким образом, объект класса содержит в себе объекты других классов.
 * 
 * В контексте композиции класс двигателя и класс колеса не могут существовать отдельно от автомобиля (думаю, это логично)
 */

/*
 * В контексте агрегации представим, что помимо автомобиля у нас есть освежитель воздуха, 
 * который может как существовать для автомобиля, так и отдельно, например, для квартиры
 * Таким образом, освежитель воздуха является отдельным классом, объект которого можно передать в качестве параметра конструктора в класс автомобиля
 */

//Теперь на практике


#region Main code
Freshener wd_40 = new();

Car car = new(wd_40);
car.Drive();
#endregion

class Car 
{
    Engine engine; //Объявляем нужные поля с типами данных (наших классов)
    Wheel[] wheels;

    Freshener freshener;

    public Car(Freshener freshener) 
    {
        //Важно, что при создании объекта автомобиля в конструкторе создаются и объекты других классов, как видно далее
        engine = new Engine();

        wheels = new Wheel[4];
        wheels[0] = new Wheel();
        wheels[1] = new Wheel();
        wheels[2] = new Wheel();
        wheels[3] = new Wheel();

        //Здесь мы освежитель юзаем в качестве параметра конструктора
        this.freshener = freshener;
    }

    public void Drive() //создадим имитацию езды (Здесь мы используем одноименные методы - это явление делегирования)
    {
        engine.Drive();
        foreach (var wheel in wheels) { 
            wheel.Drive();
        }
    }
}

class Engine //Двигатель
{
    public void Drive() //Создадим у каждого объекта иллюзию его работы
    {
        Console.WriteLine("Двигатель работает...");
    }
}

class Wheel //Колесо
{
    public void Drive()
    {
        Console.WriteLine("Колёсо едет...");
    }
}

//Теперь создадим тот же освежитель для примера агрегации

class Freshener
{

}

//И создадим отдельный от всех класс квартиры, где мы применим данный освежитель (доказав, что он может использоваться отдельно от других)

class Flat
{
    Freshener freshener;

    public Flat(Freshener freshener)
    {
        this.freshener = freshener;
    }
}

//В принципе, здесь всё, что можно было показать на данный момент. Такое очень часто мы будем юзать непосредственно при разработке игр